//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace remoteCall.PlusMinus {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PlusMinusServiceSoap", Namespace="http://tempuri.org/")]
    public partial class PlusMinusService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PlusOperationCompleted;
        
        private System.Threading.SendOrPostCallback MinusOperationCompleted;
        
        private System.Threading.SendOrPostCallback PlusMinusOperationCompleted;
        
        private System.Threading.SendOrPostCallback compute_ggtOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PlusMinusService() {
            this.Url = global::remoteCall.Properties.Settings.Default.remoteCall_PlusMinus_PlusMinusService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PlusCompletedEventHandler PlusCompleted;
        
        /// <remarks/>
        public event MinusCompletedEventHandler MinusCompleted;
        
        /// <remarks/>
        public event PlusMinusCompletedEventHandler PlusMinusCompleted;
        
        /// <remarks/>
        public event compute_ggtCompletedEventHandler compute_ggtCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Plus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double Plus(double op1, double op2) {
            object[] results = this.Invoke("Plus", new object[] {
                        op1,
                        op2});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void PlusAsync(double op1, double op2) {
            this.PlusAsync(op1, op2, null);
        }
        
        /// <remarks/>
        public void PlusAsync(double op1, double op2, object userState) {
            if ((this.PlusOperationCompleted == null)) {
                this.PlusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPlusOperationCompleted);
            }
            this.InvokeAsync("Plus", new object[] {
                        op1,
                        op2}, this.PlusOperationCompleted, userState);
        }
        
        private void OnPlusOperationCompleted(object arg) {
            if ((this.PlusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PlusCompleted(this, new PlusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Minus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double Minus(double op1, double op2) {
            object[] results = this.Invoke("Minus", new object[] {
                        op1,
                        op2});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void MinusAsync(double op1, double op2) {
            this.MinusAsync(op1, op2, null);
        }
        
        /// <remarks/>
        public void MinusAsync(double op1, double op2, object userState) {
            if ((this.MinusOperationCompleted == null)) {
                this.MinusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMinusOperationCompleted);
            }
            this.InvokeAsync("Minus", new object[] {
                        op1,
                        op2}, this.MinusOperationCompleted, userState);
        }
        
        private void OnMinusOperationCompleted(object arg) {
            if ((this.MinusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MinusCompleted(this, new MinusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PlusMinus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PlusMinusResult PlusMinus(double op1, double op2) {
            object[] results = this.Invoke("PlusMinus", new object[] {
                        op1,
                        op2});
            return ((PlusMinusResult)(results[0]));
        }
        
        /// <remarks/>
        public void PlusMinusAsync(double op1, double op2) {
            this.PlusMinusAsync(op1, op2, null);
        }
        
        /// <remarks/>
        public void PlusMinusAsync(double op1, double op2, object userState) {
            if ((this.PlusMinusOperationCompleted == null)) {
                this.PlusMinusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPlusMinusOperationCompleted);
            }
            this.InvokeAsync("PlusMinus", new object[] {
                        op1,
                        op2}, this.PlusMinusOperationCompleted, userState);
        }
        
        private void OnPlusMinusOperationCompleted(object arg) {
            if ((this.PlusMinusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PlusMinusCompleted(this, new PlusMinusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/compute_ggt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int compute_ggt(int op1, int op2) {
            object[] results = this.Invoke("compute_ggt", new object[] {
                        op1,
                        op2});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void compute_ggtAsync(int op1, int op2) {
            this.compute_ggtAsync(op1, op2, null);
        }
        
        /// <remarks/>
        public void compute_ggtAsync(int op1, int op2, object userState) {
            if ((this.compute_ggtOperationCompleted == null)) {
                this.compute_ggtOperationCompleted = new System.Threading.SendOrPostCallback(this.Oncompute_ggtOperationCompleted);
            }
            this.InvokeAsync("compute_ggt", new object[] {
                        op1,
                        op2}, this.compute_ggtOperationCompleted, userState);
        }
        
        private void Oncompute_ggtOperationCompleted(object arg) {
            if ((this.compute_ggtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.compute_ggtCompleted(this, new compute_ggtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class PlusMinusResult {
        
        private double plusResultField;
        
        private double minusResultField;
        
        /// <remarks/>
        public double plusResult {
            get {
                return this.plusResultField;
            }
            set {
                this.plusResultField = value;
            }
        }
        
        /// <remarks/>
        public double minusResult {
            get {
                return this.minusResultField;
            }
            set {
                this.minusResultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PlusCompletedEventHandler(object sender, PlusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PlusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PlusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MinusCompletedEventHandler(object sender, MinusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MinusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MinusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PlusMinusCompletedEventHandler(object sender, PlusMinusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PlusMinusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PlusMinusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PlusMinusResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PlusMinusResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void compute_ggtCompletedEventHandler(object sender, compute_ggtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class compute_ggtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal compute_ggtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591